var Environments;!function(t){t[t.Node=0]="Node",t[t.Standalone=1]="Standalone",t[t.Proxy=2]="Proxy"}(Environments||(Environments={}));var WapCom;!function(t){"use strict";var e=function(){function t(){if(this._environment=Environments.Standalone,t._instance)throw new Error("Error: Instantiation failed: Use Environment.getInstance() instead of new.");this.ResetEnvironment(),t._instance=this}return Object.defineProperty(t.prototype,"CurrentEnvironment",{get:function(){return this._environment},enumerable:!0,configurable:!0}),t.getInstance=function(){return t._instance},t.prototype.ResetEnvironment=function(){this._environment=this.SetEnvironment()},t.prototype.SetEnvironment=function(){try{return window.external.notify(t._testParameter),Environments.Node}catch(e){return Environments.Standalone}},t._testParameter="Test",t._instance=new t,t}();t.Environment=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict"}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict"}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict"}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict"}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function t(){}return t.JoinOnSep=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];return e.join(t)},t.Join=function(){for(var t=[],e=0;e<arguments.length;e++)t[e-0]=arguments[e];return t.join("")},t.Query=function(t){var e="?",n=0;for(var o in t)t.hasOwnProperty(o)&&(n++&&(e+="&"),e+=encodeURIComponent(o)+"="+encodeURIComponent(t[o]));return e},t}();t.Path=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e;!function(t){t[t.Pending=0]="Pending",t[t.Resolved=1]="Resolved",t[t.Rejected=2]="Rejected"}(e||(e={}));var n=function(){function t(t){this._state=e.Pending,this._value=null,this._handlers=[],this.DoResolve(t)}return t.prototype.then=function(e,n,o){var r=this;return new t(function(t,o){return r.done(function(n){if("function"!=typeof e)return t(n);try{return t(e(n))}catch(r){return o(r)}},function(e){if("function"!=typeof n)return o(e);try{return t(n(e))}catch(r){return o(r)}})})},t.prototype.done=function(t,e,n){var o=this;setTimeout(function(){o.Handle({onResolved:t,onRejected:e})},0)},t.prototype.cancel=function(){},t.prototype.OnFullFilled=function(t){var n=this;this._state=e.Resolved,this._value=t,this._handlers.forEach(function(t){n.Handle(t)}),this._handlers=null},t.prototype.OnRejected=function(t){var n=this;this._state=e.Rejected,this._value=t,this._handlers.forEach(function(t){n.Handle(t)}),this._handlers=null},t.prototype.Resolve=function(t){try{var e=this.GetThen(t);if(e)return void this.DoResolve(e.bind(t));this.OnFullFilled(t)}catch(n){this.OnRejected(n)}},t.prototype.Handle=function(t){this._state===e.Pending?this._handlers.push(t):(this._state===e.Resolved&&"function"==typeof t.onResolved&&t.onResolved(this._value),this._state===e.Rejected&&"function"==typeof t.onRejected&&t.onRejected(this._value))},t.prototype.DoResolve=function(t){var e=this,n=!1;try{t(function(t){n||(n=!0,e.Resolve(t))},function(t){n||(n=!0,e.OnRejected(t))})}catch(o){if(n)return;n=!0,this.OnRejected(o)}},t.prototype.GetThen=function(t){var e=typeof t;if(t&&("object"===e||"function"===e)){var n=t.then;if("function"==typeof n)return n}return null},t}();t.PromiseAdapter=n;var o=function(){function t(t){this._simValue=t}return t.prototype.then=function(t,e,n){return t(this._simValue),null},t.prototype.done=function(t,e,n){return t(this._simValue),null},t.prototype.cancel=function(){},t}();t.PromiseSimulator=o}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function t(t,e){this.key=t,this.value=e}return t}();t.Configuration=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function t(t,e){this.Key=t,this.EventObject=e}return t}();t.Event=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function t(){}return t.prototype.setLocation=function(t,e){this.coordinates||(this.coordinates=new n),this.coordinates.setLocation(t,e)},t.prototype.setPosition=function(t){this.coordinates||(this.coordinates=new n),this.coordinates.setPosition(t)},t}();t.Location=e;var n=function(){function t(){}return t.prototype.setLocation=function(t,e){this.latitude=t?JSON.stringify(t):"0",this.longitude=e?JSON.stringify(e):"0"},t.prototype.setPosition=function(t){this.latitude="0",this.longitude="0",t&&t.coords&&(this.latitude=t.coords.latitude,this.longitude=t.coords.longitude)},t}();t.Coordinates=n;var o=function(){function t(){}return t}();t.Structure=o}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function e(){}return e.GetConfigurations=function(){return t.Environment.getInstance().CurrentEnvironment==Environments.Node?e.nodeGet():e.standaloneGet()},e.standaloneGet=function(){return new t.PromiseAdapter(function(e,n){for(var o=[],r=window.location.search.substr(1),i=r.split("&"),s=0;s<i.length;s++){var a=i[s].split("=");o.push(new t.Configuration(a[0],a[1]))}e(o)})},e.nodeGet=function(){return new t.PromiseAdapter(function(t,e){try{if(!configurationHandler)throw new Error("Unable to get configurations, due to configurationHandler is null.");var n=configurationHandler.getConfigurations();t(n)}catch(o){e(o)}})},e}();t.ConfigProvider=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function e(){}return e.GetLocation=function(n,o){return void 0===n&&(n=15.64126),void 0===o&&(o=58.41659),t.Environment.getInstance().CurrentEnvironment==Environments.Node?e.nodeGetLocation(n,o):e.standaloneGetLocation(n,o)},e.standaloneGetLocation=function(e,n){return void 0===e&&(e=15.64126),void 0===n&&(n=58.41659),new t.PromiseAdapter(function(o,r){var i=new t.Location;i.setLocation(e,n),navigator&&navigator.geolocation?navigator.geolocation.getCurrentPosition(function(t){i.setPosition(t),o(i)},function(t){switch(t.code){case t.PERMISSION_DENIED:o(i);case t.POSITION_UNAVAILABLE:r("Location information is unavailable.");case t.TIMEOUT:r("The request to get user location timed out.");default:r("An unknown error occurred.")}}):o(i)})},e.nodeGetLocation=function(e,n){if(void 0===e&&(e=15.64126),void 0===n&&(n=58.41659),!geoServiceHandler)throw new Error("Unable to get location, due to geoServiceHandler is null.");return new t.PromiseAdapter(function(t,e){try{var n=geoServiceHandler.getLocation();t(n)}catch(o){e(o)}})},e}();t.GeoProvider=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function e(t,e){this.Validate(t,e),this._key=e,this._name=t}return Object.defineProperty(e.prototype,"Key",{get:function(){return this._key},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Name",{get:function(){return this._name},enumerable:!0,configurable:!0}),e.prototype.Get=function(e,n,o,r,i){return new t.PromiseSimulator("Get success")},e.prototype.GetOne=function(e,n){return new t.PromiseSimulator("GetOne success")},e.prototype.Post=function(e,n){return new t.PromiseSimulator("Post success")},e.prototype.Put=function(e,n,o){return new t.PromiseSimulator("Put success")},e.prototype.Delete=function(e,n){return new t.PromiseSimulator("true")},e.prototype.Validate=function(t,e){if(!t||""==t)throw new Error("Invalid name, please fill out correct name");if(!e||""==e)throw new Error("Invalid key, please fill out correct key")},e}();t.ServiceClient=e}(WapCom||(WapCom={}));var __extends=this&&this.__extends||function(t,e){function n(){this.constructor=t}for(var o in e)e.hasOwnProperty(o)&&(t[o]=e[o]);t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)},WapCom;!function(t){"use strict";var e=function(t){function e(e,n,o){t.call(this,e,n);var r=this.TryToGetServiceHandler();this._serviceProxy=r.getService(this.Name,this.Key)}return __extends(e,t),e.prototype.Get=function(t,e,n,o,r){return this._serviceProxy.get(t,e,n,o,r)},e.prototype.GetOne=function(t,e){return this._serviceProxy.getOne(t,e)},e.prototype.Post=function(t,e){return this._serviceProxy.post(t,e)},e.prototype.Put=function(t,e,n){return this._serviceProxy.put(t,e,n)},e.prototype.Delete=function(t,e){return this._serviceProxy["delete"](t,e)},e.prototype.TryToGetServiceHandler=function(){if(!serviceHandler)throw new Error("Unable to create ServiceClient, due to servicehandler is null");return serviceHandler},e}(t.ServiceClient);t.NodeServiceClient=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(e){function n(t,n,o,r){void 0===o&&(o=""),e.call(this,t,n),this._servicePrefix="services",this._jsonContentType="application/json",this._requestAsync=!0,this.SetBasePath(o),this._keyToken=r}return __extends(n,e),n.prototype.Get=function(e,n,o,r,i){var s=this,a=t.Path.JoinOnSep("/",this._basePath,"types",e);return new t.PromiseAdapter(function(e,u){var c=s.CreateMethodRequest("GET",t.Path.Join(a,t.Path.Query({take:n,skip:o,orderBy:r,filter:i})));c.send(),s.OnXMLHttpRequestResponse(c,e,u)})},n.prototype.GetOne=function(e,n){var o=this;return new t.PromiseAdapter(function(r,i){var s=o.CreateMethodRequest("GET",t.Path.JoinOnSep("/",o._basePath,"types",e,n));s.send(),o.OnXMLHttpRequestResponse(s,r,i)})},n.prototype.Post=function(e,n){var o=this,r=t.Path.JoinOnSep("/",this._basePath,"types",e);return new t.PromiseAdapter(function(t,e){var i=o.CreateMethodJsonRequest("POST",r);i.send(n),o.OnXMLHttpRequestResponse(i,t,e)})},n.prototype.Put=function(e,n,o){var r=this;return new t.PromiseAdapter(function(i,s){var a=r.CreateMethodJsonRequest("PUT",t.Path.JoinOnSep("/",r._basePath,"types",e,n));a.send(o),r.OnXMLHttpRequestResponse(a,i,s)})},n.prototype.Delete=function(e,n){var o=this;return new t.PromiseAdapter(function(r,i){var s=o.CreateMethodRequest("DELETE",t.Path.JoinOnSep("/",o._basePath,"types",e,n));s.send(),o.OnXMLHttpRequestResponse(s,r,i)})},n.prototype.OnXMLHttpRequestResponse=function(t,e,n){var o=this.IsHttpStatusValid;t.onload=function(){o(this.status)?e(this.response):n(this.statusText)},t.onerror=function(){n(this.statusText)}},n.prototype.IsHttpStatusValid=function(t){return t>=200&&300>t},n.prototype.CreateRequest=function(){return new XMLHttpRequest},n.prototype.CreateMethodRequest=function(t,e){var n=this.CreateRequest();return n.open(t,e,this._requestAsync),n.setRequestHeader("X-Key",this.Key),n.setRequestHeader("Key-Token",this._keyToken),n},n.prototype.CreateMethodJsonRequest=function(t,e){var n=this.CreateMethodRequest(t,e);return n.setRequestHeader("Content-type",this._jsonContentType),n},n.prototype.SetBasePath=function(e){e&&(e=this.FilterUrl(e),this._basePath=-1===e.indexOf(this._servicePrefix)?t.Path.JoinOnSep("/",e,this._servicePrefix,this.Name):t.Path.JoinOnSep("/",e,this.Name))},n.prototype.FilterUrl=function(t){return t.replace(/\/$/,"").toLowerCase()},n}(t.ServiceClient);t.StandaloneServiceClient=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function e(){}return e.GetService=function(e,n,o){return void 0===o&&(o=null),null==this.keyToken&&(this.keyToken=""),t.Environment.getInstance().CurrentEnvironment==Environments.Node?new t.NodeServiceClient(e,n,this.keyToken):new t.StandaloneServiceClient(e,n,o,this.keyToken)},e.SetServiceKeyToken=function(t){this.keyToken=t},e}();t.ServiceProvider=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function t(t){this._trafficSettings=t}return t.prototype.onEventReceived=function(t){this._trafficSettings.onEventReceived&&"[object Function]"===Object.prototype.toString.call(this._trafficSettings.onEventReceived)&&this._trafficSettings.onEventReceived.call(this,t)},t}();t.TrafficWorker=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(t){function e(e){t.call(this,e),window.OutboundEvent=this.OutboundEvent.bind(this),window.InboundEvent=this.InboundEvent.bind(this)}return __extends(e,t),e.prototype.OutboundEvent=function(t){window.external.notify(t)},e.prototype.InboundEvent=function(e){var n=JSON.parse(e);t.prototype.onEventReceived.call(this,n)},e}(t.TrafficWorker);t.NodeTrafficWorker=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(t){function e(e){t.call(this,e)}return __extends(e,t),e.prototype.OutboundEvent=function(t){},e.prototype.InboundEvent=function(t){},e}(t.TrafficWorker);t.StandaloneTrafficWorker=e}(WapCom||(WapCom={}));var WapCom;!function(t){"use strict";var e=function(){function e(t){this.Worker=this.SetEnvironmentWorker(t)}return e.prototype.SendEvent=function(t,e){var n=this.CreateEvent(t,e);this.Worker.OutboundEvent(n)},e.prototype.RequestFocus=function(t){var n=this.CreateEvent(e._focusRequestParameter,t);this.Worker.OutboundEvent(n)},e.prototype.CreateEvent=function(e,n){var o=new t.Event(e,n);return JSON.stringify(o)},e.prototype.SetEnvironmentWorker=function(e){return t.Environment.getInstance().CurrentEnvironment==Environments.Node?new t.NodeTrafficWorker(e):new t.StandaloneTrafficWorker(e)},e._focusRequestParameter="FocusRequest",e}();t.TrafficManager=e}(WapCom||(WapCom={}));
//# sourceMappingURL=data:application/json;base64,
